{"version":3,"sources":["utils/services.ts","components/Navbar/Navbar.tsx","components/ModalViewEmail/ModalViewEmail.tsx","components/ModalSendEmail/ModalSendEmail.tsx","components/Dashboard/Dashboard.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isLogged","localStorage","getItem","getEmail","Navbar","history","useHistory","useState","username","setUsername","useEffect","user","mode","Item","to","HomeOutlined","style","marginRight","float","onClick","removeItem","replace","PoweroffOutlined","UserOutlined","ModalViewEmail","sujet","from","message","date","visible","setVisible","onVisible","closable","footer","key","moment","format","disabled","value","paddingTop","ModalSendEmail","setSujet","destinataire","setDestinataire","messageEmail","setMessageEmail","TextArea","Input","sendEmail","a","data","FormData","append","axios","post","success","marginLeft","type","title","marginBottom","placeholder","onChange","event","target","rows","Dashboard","listeEmail","setListeEmail","loadEmail","email","get","request","counter","reverse","e","push","id","display","marginTop","length","map","author","avatar","src","alt","actions","content","datetime","fromNow","Login","setEmail","isConnected","setIsConnect","connect","setItem","className","required","onPressEnter","App","PrivateRoute","component","rest","isAuthenticated","render","props","React","createElement","pathname","path","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f7073717.chunk.js","sourcesContent":["export const logged = (): void => {\n  localStorage.setItem(\"login\", \"true\");\n};\n\nexport const logout = (): void => {\n  localStorage.removeItem(\"login\");\n  localStorage.removeItem(\"email\");\n};\nexport const isLogged = (): boolean => {\n  if (localStorage.getItem(\"login\") === \"true\") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const putEmail = (data: string): void => {\n  localStorage.setItem(\"email\", data);\n};\n\nexport const getEmail = (): string | null => {\n  return localStorage.getItem(\"email\");\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Menu } from \"antd\";\nimport {\n  HomeOutlined,\n  PoweroffOutlined,\n  UserOutlined\n} from \"@ant-design/icons\";\nimport { logout, getEmail } from \"../../utils/services\";\n\nconst Navbar: React.FC = () => {\n  let history = useHistory();\n  const [username, setUsername] = useState(\"N/A\");\n  const deconnexion = () => {\n    logout();\n    history.replace(\"/\");\n  };\n\n  useEffect(() => {\n    let user = getEmail();\n    if (user) {\n      setUsername(user);\n    }\n  }, [username]);\n\n  return (\n    <div>\n      <Menu mode=\"horizontal\">\n        <Menu.Item>\n          <Link to=\"/dashboard\">\n            <HomeOutlined style={{ marginRight: \"5px\" }} />\n            Dashboard\n          </Link>\n        </Menu.Item>\n        <Menu.Item style={{ float: \"right\" }} onClick={deconnexion}>\n          <PoweroffOutlined style={{ marginRight: \"5px\" }} />\n          DÃ©connexion\n        </Menu.Item>\n        <Menu.Item style={{ float: \"right\" }}>\n          <UserOutlined style={{ marginRight: \"5px\" }} />\n          {username}@temporal.com\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useState } from \"react\";\nimport { Modal, Input, Button } from \"antd\";\nimport moment from \"moment\";\n\ninterface Props {\n  sujet: string;\n  from: string;\n  message: string;\n  date: string;\n}\nconst ModalViewEmail: React.FC<Props> = ({ sujet, from, message, date }) => {\n  const [visible, setVisible] = useState(false);\n  const onVisible = () => {\n    if (visible) {\n      setVisible(false);\n    } else {\n      setVisible(true);\n    }\n  };\n  return (\n    <div>\n      <Button onClick={onVisible}>Consulter l'email</Button>\n      <Modal\n        visible={visible}\n        closable={false}\n        footer={[\n          <Button key=\"back\" onClick={onVisible}>\n            Lu\n          </Button>\n        ]}\n      >\n        <h3>Sujet : {sujet}</h3>\n        <p>{moment(date).format(\"YYYY-MM-DD HH:mm:ss\")}</p>\n        <Input disabled value={from} />\n        <p style={{ paddingTop: \"3%\" }}>{message}</p>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ModalViewEmail;\n","import React, { useState } from \"react\";\nimport { Modal, Input, Button, message } from \"antd\";\nimport { getEmail } from \"../../utils/services\";\nimport axios from \"axios\";\n\nconst ModalSendEmail: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [sujet, setSujet] = useState(\"\");\n  const [destinataire, setDestinataire] = useState(\"\");\n  const [messageEmail, setMessageEmail] = useState(\"\");\n\n  const { TextArea } = Input;\n\n  const onChangeSujet = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSujet(event.target.value);\n  };\n  const onChangeDestinataire = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinataire(event.target.value);\n  };\n  const onChangeMessage = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessageEmail(event.target.value);\n  };\n\n  const sendEmail = async () => {\n    let from = getEmail();\n    let data = new FormData();\n\n    if (from) {\n      data.append(\"emailFrom\", from);\n    }\n    data.append(\"emailDesti\", destinataire);\n    data.append(\"sujet\", sujet);\n    data.append(\"message\", messageEmail);\n\n    let result = await axios.post(\n      \"http://172.22.247.155:8888/api/email/send\",\n      data\n    );\n\n    if (result.data === \"ok\") {\n      message.success(\"Votre email est envoyÃ© !\");\n      setSujet(\"\");\n      setDestinataire(\"\");\n      setMessageEmail(\"\");\n      setVisible(false);\n    }\n  };\n\n  const onVisible = () => {\n    if (visible) {\n      setVisible(false);\n    } else {\n      setVisible(true);\n    }\n  };\n\n  return (\n    <div style={{ marginLeft: \"1%\" }}>\n      <Button onClick={onVisible} type=\"primary\">\n        Envoyer un email\n      </Button>\n      <Modal\n        visible={visible}\n        title=\"Envoyer un email\"\n        closable={false}\n        footer={[\n          <Button key=\"cancel\" onClick={onVisible}>\n            Cancel\n          </Button>,\n          <Button key=\"submit\" type=\"primary\" onClick={sendEmail}>\n            Envoyer\n          </Button>\n        ]}\n      >\n        <Input\n          style={{ marginBottom: \"1%\" }}\n          placeholder=\"Sujet\"\n          value={sujet}\n          onChange={onChangeSujet}\n        />\n        <Input\n          style={{ marginBottom: \"1%\" }}\n          placeholder=\"Destinataire\"\n          value={destinataire}\n          onChange={onChangeDestinataire}\n        />\n        <TextArea\n          rows={4}\n          placeholder=\"Message\"\n          value={messageEmail}\n          onChange={onChangeMessage}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default ModalSendEmail;\n","import React, { useState, useEffect } from \"react\";\nimport { Comment, Avatar, Tooltip, Divider, Button } from \"antd\";\nimport Navbar from \"../Navbar/Navbar\";\nimport moment from \"moment\";\nimport ModalViewEmail from \"../ModalViewEmail/ModalViewEmail\";\nimport ModalSendEmail from \"../ModalSendEmail/ModalSendEmail\";\nimport { IEmail } from \"../../interface/IEmail\";\nimport { getEmail } from \"../../utils/services\";\nimport axios from \"axios\";\n\nconst Dashboard: React.FC = () => {\n  const [listeEmail, setListeEmail] = useState<IEmail[]>([]);\n\n  const loadEmail = async () => {\n    let email = getEmail();\n    let request = await axios.get(\n      `http://172.22.247.155:8888/api/email/get/${email}`\n    );\n    const data: IEmail[] = [];\n\n    let counter = 0;\n    if (request.data) {\n      for (let e of request.data.reverse()) {\n        counter++;\n        data.push({\n          id: counter,\n          from: e.from,\n          date: e.date,\n          sujet: e.sujet,\n          message: e.message\n        });\n      }\n    }\n    setListeEmail(data);\n  };\n\n  useEffect(() => {\n    loadEmail();\n  }, []);\n\n  return (\n    <div>\n      <Navbar />\n      <div style={{ display: \"flex\", marginTop: \"1%\" }}>\n        <ModalSendEmail />\n        <Button onClick={loadEmail} style={{ marginLeft: \"1%\" }} type=\"default\">\n          Rafraichir ses emails\n        </Button>\n      </div>\n\n      <Divider />\n      {listeEmail.length > 0 &&\n        listeEmail.map(e => (\n          <Comment\n            key={e.id}\n            author={e.from}\n            style={{ marginLeft: \"1%\" }}\n            avatar={\n              <Avatar\n                src=\"https://cdn3.iconfinder.com/data/icons/peelicons-vol-1/50/Mail-512.png\"\n                alt=\"ExpÃ©diteur\"\n              />\n            }\n            actions={[\n              <ModalViewEmail\n                sujet={e.sujet}\n                from={e.from}\n                message={e.message}\n                date={e.date}\n              ></ModalViewEmail>\n            ]}\n            content={<p>{e.sujet}</p>}\n            datetime={\n              <Tooltip title={moment(e.date).format(\"YYYY-MM-DD HH:mm:ss\")}>\n                <span>{moment(e.date).fromNow()}</span>\n              </Tooltip>\n            }\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { Modal, Button, Input } from \"antd\";\nimport \"./Login.css\";\nimport { logged, isLogged, putEmail } from \"../../utils/services\";\n\nconst Login: React.FC = () => {\n  const history = useHistory();\n  const [email, setEmail] = useState(\"\");\n  const [isConnected, setIsConnect] = useState(false);\n\n  const onSetEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const connect = () => {\n    putEmail(email);\n    logged();\n    history.replace(\"/dashboard\");\n  };\n\n  useEffect(() => {\n    if (isLogged()) {\n      setIsConnect(true);\n    }\n  }, []);\n\n  return (\n    <div className=\"bg-modal\">\n      {isConnected && <Redirect to=\"/dashboard\" />}\n      <Modal\n        footer={[\n          <Button key=\"submit\" type=\"primary\" onClick={connect}>\n            VÃ©rifier les mails\n          </Button>\n        ]}\n        title=\"\n        Saisissez le mail jetable de votre choix\"\n        visible={true}\n        closable={false}\n      >\n        <Input\n          required\n          placeholder=\"@temporal.com\"\n          value={email}\n          onPressEnter={connect}\n          onChange={onSetEmail}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\nimport Login from \"./components/Login/Login\";\nimport { isLogged } from \"./utils/services\";\n\nconst App: React.FC = () => {\n  const PrivateRoute = ({ component, ...rest }: any) => {\n    let isAuthenticated = false;\n    if (isLogged()) {\n      isAuthenticated = true;\n    }\n    const routeComponent = (props: any) =>\n      isAuthenticated ? (\n        React.createElement(component, props)\n      ) : (\n        <Redirect to={{ pathname: \"/\" }} />\n      );\n    return <Route {...rest} render={routeComponent} />;\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <PrivateRoute path=\"/dashboard/\" component={Dashboard} />\n        <Route path=\"/\" exact component={Login} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}