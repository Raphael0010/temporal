{"version":3,"sources":["utils/services.ts","components/Navbar/Navbar.tsx","components/ModalViewEmail/ModalViewEmail.tsx","components/ModalSendEmail/ModalSendEmail.tsx","components/Dashboard/Dashboard.tsx","components/Login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isLogged","localStorage","getItem","getEmail","Navbar","history","useHistory","useState","username","setUsername","useEffect","user","mode","Item","to","HomeOutlined","style","marginRight","float","onClick","removeItem","replace","PoweroffOutlined","UserOutlined","ModalViewEmail","sujet","from","message","date","visible","setVisible","onVisible","closable","footer","key","disabled","value","ModalSendEmail","setSujet","destinataire","setDestinataire","messageEmail","setMessageEmail","TextArea","Input","sendEmail","a","axios","post","emailFrom","emailDesti","data","status","success","marginLeft","marginTop","type","title","marginBottom","placeholder","onChange","event","target","rows","Dashboard","listeEmail","loadEmail","map","e","author","avatar","src","alt","actions","content","datetime","moment","format","fromNow","Login","email","setEmail","isConnected","setIsConnect","connect","setItem","className","required","onPressEnter","App","PrivateRoute","component","rest","isAuthenticated","render","props","React","createElement","pathname","path","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.bccb725b.chunk.js","sourcesContent":["export const logged = (): void => {\n  localStorage.setItem(\"login\", \"true\");\n};\n\nexport const logout = (): void => {\n  localStorage.removeItem(\"login\");\n  localStorage.removeItem(\"email\");\n};\nexport const isLogged = (): boolean => {\n  if (localStorage.getItem(\"login\") === \"true\") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const putEmail = (data: string): void => {\n  localStorage.setItem(\"email\", data);\n};\n\nexport const getEmail = (): string | null => {\n  return localStorage.getItem(\"email\");\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Menu } from \"antd\";\nimport {\n  HomeOutlined,\n  PoweroffOutlined,\n  UserOutlined\n} from \"@ant-design/icons\";\nimport { logout, getEmail } from \"../../utils/services\";\n\nconst Navbar: React.FC = () => {\n  let history = useHistory();\n  const [username, setUsername] = useState(\"N/A\");\n  const deconnexion = () => {\n    logout();\n    history.replace(\"/\");\n  };\n\n  useEffect(() => {\n    let user = getEmail();\n    if (user) {\n      setUsername(user);\n    }\n  }, [username]);\n\n  return (\n    <div>\n      <Menu mode=\"horizontal\">\n        <Menu.Item>\n          <Link to=\"/dashboard\">\n            <HomeOutlined style={{ marginRight: \"5px\" }} />\n            Dashboard\n          </Link>\n        </Menu.Item>\n        <Menu.Item style={{ float: \"right\" }} onClick={deconnexion}>\n          <PoweroffOutlined style={{ marginRight: \"5px\" }} />\n          Déconnexion\n        </Menu.Item>\n        <Menu.Item style={{ float: \"right\" }}>\n          <UserOutlined style={{ marginRight: \"5px\" }} />\n          {username}@temporal.com\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useState } from \"react\";\nimport { Modal, Input, Button } from \"antd\";\n\ninterface Props {\n  sujet: string;\n  from: string;\n  message: string;\n  date: string;\n}\nconst ModalViewEmail: React.FC<Props> = ({ sujet, from, message, date }) => {\n  const [visible, setVisible] = useState(false);\n  const onVisible = () => {\n    if (visible) {\n      setVisible(false);\n    } else {\n      setVisible(true);\n    }\n  };\n  return (\n    <div>\n      <Button onClick={onVisible}>Consulter l'email</Button>\n      <Modal\n        visible={visible}\n        closable={false}\n        footer={[\n          <Button key=\"back\" onClick={onVisible}>\n            Lu\n          </Button>\n        ]}\n      >\n        <p>{sujet}</p>\n        <p>{date}</p>\n        <Input disabled value={from} />\n        <p>{message}</p>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ModalViewEmail;\n","import React, { useState } from \"react\";\nimport { Modal, Input, Button, message } from \"antd\";\nimport { getEmail } from \"../../utils/services\";\nimport axios from \"axios\";\n\nconst ModalSendEmail: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [sujet, setSujet] = useState(\"\");\n  const [destinataire, setDestinataire] = useState(\"\");\n  const [messageEmail, setMessageEmail] = useState(\"\");\n\n  const { TextArea } = Input;\n\n  const onChangeSujet = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSujet(event.target.value);\n  };\n  const onChangeDestinataire = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setDestinataire(event.target.value);\n  };\n  const onChangeMessage = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessageEmail(event.target.value);\n  };\n\n  const sendEmail = async () => {\n    let from = getEmail();\n    let result = await axios.post(\"http://172.22.247.155/api/email/send\", {\n      emailFrom: from,\n      emailDesti: destinataire,\n      sujet: sujet,\n      message: messageEmail\n    });\n\n    if (result.data.status === \"200\") {\n      message.success(\"Votre email est envoyé !\");\n      setVisible(false);\n    }\n  };\n\n  const onVisible = () => {\n    if (visible) {\n      setVisible(false);\n    } else {\n      setVisible(true);\n    }\n  };\n\n  return (\n    <div style={{ marginLeft: \"1%\" }}>\n      <Button onClick={onVisible} style={{ marginTop: \"1%\" }} type=\"primary\">\n        Envoyer un email\n      </Button>\n      <Modal\n        visible={visible}\n        title=\"Envoyer un email\"\n        closable={false}\n        footer={[\n          <Button key=\"cancel\" onClick={onVisible}>\n            Cancel\n          </Button>,\n          <Button key=\"submit\" type=\"primary\" onClick={sendEmail}>\n            Envoyer\n          </Button>\n        ]}\n      >\n        <Input\n          style={{ marginBottom: \"1%\" }}\n          placeholder=\"Sujet\"\n          value={sujet}\n          onChange={onChangeSujet}\n        />\n        <Input\n          style={{ marginBottom: \"1%\" }}\n          placeholder=\"Destinataire\"\n          value={destinataire}\n          onChange={onChangeDestinataire}\n        />\n        <TextArea\n          rows={4}\n          placeholder=\"Message\"\n          value={messageEmail}\n          onChange={onChangeMessage}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default ModalSendEmail;\n","import React, { useState, useEffect } from \"react\";\nimport { Comment, Avatar, Tooltip, Divider } from \"antd\";\nimport Navbar from \"../Navbar/Navbar\";\nimport moment from \"moment\";\nimport ModalViewEmail from \"../ModalViewEmail/ModalViewEmail\";\nimport ModalSendEmail from \"../ModalSendEmail/ModalSendEmail\";\nimport { IEmail } from \"../../interface/IEmail\";\n\nconst Dashboard: React.FC = () => {\n  const [listeEmail, setListeEmail] = useState<IEmail[]>([]);\n\n  const loadEmail = async () => {\n    //\n  };\n\n  useEffect(() => {\n    loadEmail();\n  }, []);\n\n  return (\n    <div>\n      <Navbar />\n      <ModalSendEmail />\n      <Divider />\n      {listeEmail &&\n        listeEmail.map(\n          e =>\n            (\n              <Comment\n                key={e.date}\n                author={e.from}\n                style={{ marginLeft: \"1%\" }}\n                avatar={\n                  <Avatar\n                    src=\"https://cdn3.iconfinder.com/data/icons/peelicons-vol-1/50/Mail-512.png\"\n                    alt=\"Expéditeur\"\n                  />\n                }\n                actions={[\n                  <ModalViewEmail\n                    sujet={e.sujet}\n                    from={e.from}\n                    message={e.message}\n                    date={e.date}\n                  ></ModalViewEmail>\n                ]}\n                content={<p>{e.sujet}</p>}\n                datetime={\n                  <Tooltip title={moment().format(\"YYYY-MM-DD HH:mm:ss\")}>\n                    <span>{moment().fromNow()}</span>\n                  </Tooltip>\n                }\n              />\n            ) && <Divider />\n        )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { Modal, Button, Input } from \"antd\";\nimport \"./Login.css\";\nimport { logged, isLogged, putEmail } from \"../../utils/services\";\n\nconst Login: React.FC = () => {\n  const history = useHistory();\n  const [email, setEmail] = useState(\"\");\n  const [isConnected, setIsConnect] = useState(false);\n\n  const onSetEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const connect = () => {\n    putEmail(email);\n    logged();\n    history.replace(\"/dashboard\");\n  };\n\n  useEffect(() => {\n    if (isLogged()) {\n      setIsConnect(true);\n    }\n  }, []);\n\n  return (\n    <div className=\"bg-modal\">\n      {isConnected && <Redirect to=\"/dashboard\" />}\n      <Modal\n        footer={[\n          <Button key=\"submit\" type=\"primary\" onClick={connect}>\n            Vérifier les mails\n          </Button>\n        ]}\n        title=\"\n        Saisissez le mail jetable de votre choix\"\n        visible={true}\n        closable={false}\n      >\n        <Input\n          required\n          placeholder=\"@temporal.com\"\n          value={email}\n          onPressEnter={connect}\n          onChange={onSetEmail}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\nimport Login from \"./components/Login/Login\";\nimport { isLogged } from \"./utils/services\";\n\nconst App: React.FC = () => {\n  const PrivateRoute = ({ component, ...rest }: any) => {\n    let isAuthenticated = false;\n    if (isLogged()) {\n      isAuthenticated = true;\n    }\n    const routeComponent = (props: any) =>\n      isAuthenticated ? (\n        React.createElement(component, props)\n      ) : (\n        <Redirect to={{ pathname: \"/\" }} />\n      );\n    return <Route {...rest} render={routeComponent} />;\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <PrivateRoute path=\"/dashboard/\" component={Dashboard} />\n        <Route path=\"/\" exact component={Login} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}